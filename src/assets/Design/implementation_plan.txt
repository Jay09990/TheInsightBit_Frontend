This is the implementation plan for the 'insightbit' blog website UI based on the provided design images in this folder.

Files inspected (source images used as reference):
- Landing page.png
- Home page.png
- Login page.png
- Register page.png
- Menu bar.png

Available UI assets (logos/icons in src/assets/images):
- logo.svg
- facebook.svg
- instagram.svg
- youtube.svg
- x.svg
- whatsapp.svg

High-level constraints and decisions (from user):
- Implement in React using JSX (no TypeScript).
- Use Tailwind CSS (already added to the project dependencies).
- Mobile-first design: the provided designs are mobile-focused; we will implement mobile-first and make responsive for larger screens.
- Do not add or create new design assets; only use the images provided in this folder.
- Slider: auto-playing, continuous slide of images with small content overlay; should cycle automatically (continuous loop).
- Blog detail page exists in design but we will NOT implement it now.
- No testing required for now.
- Colors, fonts, font-sizes, spacing: aim for pixel-perfect matching to the provided design images.

Assumptions (explicit, 1-2 reasonable assumptions to proceed):
1) Exact color hex values and font metrics are not provided. We'll approximate by sampling the design images and then consolidate those tokens in Tailwind's config (tailwind.config.js) so we can hit pixel-perfect values. If you have the Figma token export later, we will replace them.
2) The project already has Tailwind configured and included in the build pipeline; I'll follow the existing setup. If any Tailwind configuration changes are needed (custom fonts/colors/screens), I'll update tailwind.config.js only after you approve creating that file/change.

Component and page breakdown (mapping to files)
- Pages (already-present names will be respected):
  - src/pages/Landing_page.jsx
    - Uses components from src/components/landing_components:
      - Hero.jsx (already present) — hero layout, CTA, image
      - Aboutus.jsx (already present) — about section
      - RecentPosts.jsx (already present) — recent posts list/grid
    - Top navigation: src/components/util/Navbar.jsx and/or Menu.jsx
  - src/pages/Home_page.jsx
    - Uses components from src/components/home_components:
      - HeadlineCards.jsx (already present)
      - Slider.jsx (already present) — implement autoplay continuous behavior
      - Sidebar components (create if necessary in home_components)
  - src/pages/Login_page.jsx
    - Mobile-first login form based on Login page.png
  - src/pages/Register_page.jsx
    - Mobile-first register form based on Register page.png
  - (Blog detail page present in design — not implemented now)

- Util components (in src/components/util):
  - Navbar.jsx / Menu.jsx — consistent navbar/menu matching Menu bar.png using `logo.svg` and platform icons
  - Footer.jsx — include social icons and logo (use provided assets)

Tailwind-specific approach
- Use mobile-first utility classes (sm:, md:, lg:) to progressively enhance layout.
- Create a small set of design tokens in Tailwind config to ensure pixel-perfect:
  - colors: sample primary, secondary, background, text from images
  - fontFamily: register the design font(s) if available (else use closest system or Google font and add import)
  - fontSize: add custom sizes if needed to match pixel values
- Keep styles in JSX via Tailwind classes; only create component-level CSS if needed for very specific pixel-perfect adjustments (rare).

Slider behavior (detailed)
- Slider component (src/components/home_components/Slider.jsx):
  - Accepts an array of slides: { id, image, title, excerpt, link }
  - Auto-plays continuously and loops back to start without abrupt jump.
  - Smooth transition: CSS transform/translate with transition or a performant JS animation using requestAnimationFrame for continuous movement.
  - Default autoplay timing: 3000ms per slide (configurable via prop). Since user requested "continuous", implement a smooth auto-scroll carousel that keeps sliding (not only discrete jumps), but also supports discrete slide snapping for accessibility.
  - Keyboard accessibility and aria roles where appropriate.
  - On small screens, slides stack full-width; on larger screens show more content area next to image as the design suggests.

Data shapes / contract (mock data for now)
- Post object:
  {
    id: string | number,
    title: string,
    excerpt: string,
    content: string,
    image: string, // path to asset or remote URL
    author: { name: string, avatar?: string },
    date: string (ISO),
    tags: string[],
    slug: string
  }
- Slider item:
  { id, image, title, excerpt, link }
- Forms: login/register forms will validate required fields and report validation errors client-side (no backend call performed yet).

Edge cases and accessibility
- Missing image: render a neutral placeholder (solid bg with icon/text).
- Long text: clamp to sensible lines using Tailwind utilities and CSS line-clamp plugin (if available) or custom CSS.
- Small screens: ensure tap targets and readable font sizes.
- Forms: require attributes and basic validation messages.
- Slider: pause auto-play on focus and for reduced-motion users (respect prefers-reduced-motion).

Pixel-perfect note and verification strategy
- Pixel-perfect using image references: I'll visually match fonts, sizes, spacing, and colors by sampling the provided design images and mapping tokens into Tailwind.
- For perfect matching we will:
  1) Add tokens to tailwind.config.js (colors, fonts, fontSizes) to match image measurements.
  2) Use measured Tailwind spacing (or custom values) to mirror pixel spacing in the designs.
  3) Iterate visually and adjust tokens until the pages match the images closely.
- If you have exact token exports from Figma (colors, fonts, font sizes), provide them and I'll use those to guarantee exact pixel match.

Files I will create next (only after explicit user approval — per your requirement to ask before creating files):
- src/assets/Design/implementation_plan.txt (this file) — created now per your go-ahead
- Later (ask before creating):
  - New/updated components or pages where needed, following existing naming and folder conventions (e.g., src/components/home_components/Slider.jsx adjustments, or small files for missing sidebar components)
  - Optional: a small `src/data/mockPosts.js` to store mock post data for development
  - Optional: tailwind.config.js updates to add design tokens (I will propose exact changes before editing that file)

Next steps (what I will do after you confirm):
- If you confirm, I'll create this plan file (created now) and then wait for your instruction to start implementing components/pages.
- When you want me to implement: I'll propose a short phased plan (implement Navbar + Footer, Landing page, Home page components with Slider, Login/Register forms) and create files one-by-one, asking before creating any new folders/files.

Contact questions / choices for you to decide now
1) Confirm that I should use Tailwind (you've said yes).
2) Confirm you want me to create `src/data/mockPosts.js` when I begin implementing, or prefer inline mock data instead (I recommend a single mock file for reuse).
3) If you have exact fonts or color tokens available, please add them or share them; otherwise I'll sample colors from the images.

End of plan.
